version: "3.8"

x-common-env: &common-env
  CYCLONEDDS_URI: >-
    <CycloneDDS><Domain><Discovery><MaxAutoParticipantIndex>1000</MaxAutoParticipantIndex></Discovery><General><Interfaces><NetworkInterface name="lo" multicast="true"/></Interfaces></General></Domain></CycloneDDS>
  RMW_IMPLEMENTATION: rmw_cyclonedds_cpp
  ROS_DOMAIN_ID: "0"

services:
  # --- Headless Gazebo server only (no GUI) ---
  gz-server:
    image: turtlebot4:jazzy
    container_name: gz-server
    tty: true
    build:
      context: ./
      dockerfile: ./Dockerfile
      args: { ROS_DISTRO: jazzy }
    network_mode: host
    privileged: true
    ipc: host
    environment:
      <<: *common-env
      ROS_DISTRO: jazzy
      # Keep LiDAR ranges correct on AMD
      LIBGL_DRI3_DISABLE: "1"
      # Use OGRE2 renderer; headless flag below prevents GUI
      GZ_RENDER_ENGINE: ogre2
      # Faster rendering path (no vsync)
      vblank_mode: "0"
      # No GUI layout
      GZ_GUI_CONFIG: ""
      # Qt can use SHM
      QT_X11_NO_MITSHM: "0"
      QT_QPA_PLATFORM: xcb
    devices:
      - /dev/dri/renderD128:/dev/dri/renderD128
      - /dev/dri/card0:/dev/dri/card0
    volumes:
      - /dev/shm:/dev/shm
      # Not strictly needed headless, but harmless to keep:
      - /tmp/.X11-unix:/tmp/.X11-unix:ro
    command: >
      bash -lc '
        set -e
        WORLD=/opt/ros/${ROS_DISTRO}/share/turtlebot4_gz/worlds/maze.sdf
        # Run Gazebo headless, server-only, realtime
        gz sim -s -r --headless-rendering "$WORLD"
      '
    restart: unless-stopped

  # --- Spawn TB4 and run Nav2 (no GUI, no RViz) ---
  tb4-stack:
    image: turtlebot4:jazzy
    container_name: tb4-stack
    tty: true
    depends_on:
      - gz-server
    network_mode: host
    privileged: true
    ipc: host
    environment:
      <<: *common-env
      ROS_DISTRO: jazzy
      LIBGL_DRI3_DISABLE: "1"
      GZ_RENDER_ENGINE: ogre2
      vblank_mode: "0"
      QT_X11_NO_MITSHM: "0"
      QT_QPA_PLATFORM: xcb
      # Make sure ROS-GZ can find resources
      GZ_SIM_RESOURCE_PATH: /opt/ros/${ROS_DISTRO}/share
    devices:
      - /dev/dri/renderD128:/dev/dri/renderD128
      - /dev/dri/card0:/dev/dri/card0
    volumes:
      - /dev/shm:/dev/shm
      - /tmp/.X11-unix:/tmp/.X11-unix:ro
    command: >
      bash -lc '
        set -euo pipefail

        # Wait until Gazebo world is up (port 11345 is gz-simâ€™s default transport)
        for i in {1..30}; do
          if gz topic -l >/dev/null 2>&1; then break; fi
          sleep 1
        done

        # Spawn the TurtleBot4 model into the running "maze" world
        MODEL=/opt/ros/${ROS_DISTRO}/share/turtlebot4_gz/models/turtlebot4/model.sdf
        WORLD_NAME=maze
        ros2 run ros_gz_sim create -world ${WORLD_NAME} -file "${MODEL}" -name turtlebot4

        # Start Nav2 stack (no RViz) with your map, use_sim_time on
        ros2 launch turtlebot4_navigation nav2.launch.py \
          use_sim_time:=true \
          map:=/opt/ros/${ROS_DISTRO}/share/turtlebot4_navigation/maps/maze.yaml \
          rviz:=false
      '
    restart: unless-stopped

  # --- Foxglove bridge (unchanged) ---
  foxglove-bridge:
    image: foxglove-bridge
    environment:
      <<: *common-env
    network_mode: host
    restart: unless-stopped
